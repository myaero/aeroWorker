#!/usr/bin/env php
<?php

declare(strict_types=1);
error_reporting(E_ALL);
ini_set('display_errors', '1');

# Load Workers
// Find and require the autoloader
$autoloadPaths = [
    __DIR__ . '/../../../autoload.php',
    __DIR__ . '/../vendor/autoload.php'
];

$loaded = false;
foreach ($autoloadPaths as $path) {
    if (file_exists($path)) {
        require_once $path;
        $loaded = true;
        break;
    }
}

if (!$loaded) {
    fwrite(STDERR, 'Unable to find composer autoloader. Please run composer install.' . PHP_EOL);
    exit(1);
}

try {
    // Load config if exists
    $configPath = getcwd() . '/config/aeroworker.php';
    $config = file_exists($configPath) ? require $configPath : [];

    // Determine the workers directory
    $workersDirectory = null;

    // Step 1: Check if aeroworker.json exists
    $autoloadJsonPaths = [
        '/var/www/html/aeroworker.json'
    ];
    foreach ($autoloadJsonPaths as $aeroworkerConfigPath) {
        if (file_exists($aeroworkerConfigPath)) {
            $aeroworkerConfig = json_decode(file_get_contents($aeroworkerConfigPath), true);
            if (isset($aeroworkerConfig['workers_directory'])) {
                $workersDirectory = (str_replace('aeroworker.json', '', $aeroworkerConfigPath)) . ltrim($aeroworkerConfig['workers_directory'], '/');
            }
        }
    }

    // Step 2: Fallback to default directory if no configuration is found
    if (!$workersDirectory) {
        $workersDirectory = getcwd() . '/src/Workers';
    }

    // Load workers from the determined directory
    \aeroWorker\WorkerAutoLoader::loadWorkers($workersDirectory);

    // Initialize the worker manager
    $manager = new \aeroWorker\WorkerManager($config);

    // Set up error handling
    set_error_handler(function ($severity, $message, $file, $line) {
        throw new ErrorException($message, 0, $severity, $file, $line);
    });

    // Graceful shutdown
    pcntl_signal(SIGTERM, function () use ($manager) {
        $manager->shutdown();
        exit(0);
    });

    pcntl_signal(SIGINT, function () use ($manager) {
        $manager->shutdown();
        exit(0);
    });

    // Enable async signals
    pcntl_async_signals(true);

    echo "Worker starting..." . PHP_EOL;
    $manager->start();
} catch (Throwable $e) {
    fwrite(STDERR, sprintf(
        "[%s] Error: %s in %s:%d\nStack trace:\n%s\n",
        date('Y-m-d H:i:s'),
        $e->getMessage(),
        $e->getFile(),
        $e->getLine(),
        $e->getTraceAsString()
    ));
    exit(1);
}

# Register commands
use Symfony\Component\Console\Application;
use aeroWorker\Commands\RestartWorkerCommand;

$application = new Application();
$application->add(new RestartWorkerCommand());
$application->run();